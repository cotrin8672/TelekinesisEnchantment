plugins {
    alias(libs.plugins.architectury)
    alias(libs.plugins.loom)
    alias(libs.plugins.shadow)
    alias(libs.plugins.kotlin)
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    silentMojangMappingsLicense()
}

base {
    archivesName = rootProject.modId
    version = "${rootProject.modVersion}-mc${libs.versions.minecraft.get()}-${project.name}"
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    minecraft(libs.minecraft)
    mappings loom.officialMojangMappings()

    modImplementation(libs.fabric.loader)
    modImplementation(libs.fabric.api)
    modImplementation(libs.fabric.kotlin)

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    inputs.property 'version', project.version
    def replaceProperties = [
            minecraftVersion: libs.versions.minecraft.get(),
            fabricVersion: libs.versions.fabricLoader.get(),
            architecturyVersion: libs.versions.architecturyApi.get(),
            fabricKotlinVersion: libs.versions.fabricKotlin.get(),
            modId: rootProject.modId,
            modName: rootProject.modName,
            modLicense: rootProject.modLicense,
            modVersion: rootProject.modVersion,
            modAuthors: rootProject.modAuthors,
            modDescription: rootProject.modDescription,
    ]

    filesMatching('fabric.mod.json') {
        expand replaceProperties
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}
