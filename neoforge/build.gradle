plugins {
    alias(libs.plugins.architectury)
    alias(libs.plugins.loom)
    alias(libs.plugins.shadow)
    alias(libs.plugins.kotlin)
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    silentMojangMappingsLicense()
}

base {
    archivesName = "telekinesisenchantment-$project.name"
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
    maven {
        name = "KotlinForForge"
        url = uri("https://thedarkcolour.github.io/KotlinForForge/")
        content { includeGroup("thedarkcolour") }
    }
}

dependencies {
    minecraft(libs.minecraft)
    mappings loom.officialMojangMappings()

    neoForge(libs.neoforge)
    implementation(libs.kotlinforforge) {
        exclude(group: "net.neoforged.fancymodloader", module: "loader")
    }

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
    inputs.property 'version', project.version
    def replaceProperties = [
            minecraftVersion: libs.versions.minecraft.get(),
            minecraftVersionRange: libs.versions.minecraftRange.get(),
            neoforgeVersion: libs.versions.neoforge.get(),
            neoforgeVersionRange: libs.versions.neoforgeRange.get(),
            architecturyVersionRange: libs.versions.architecturyRange.get(),
            loaderVersionRange: libs.versions.kotlinforforgeRange.get(),
            modId: rootProject.modId,
            modName: rootProject.modName,
            modLicense: rootProject.modLicense,
            modVersion: rootProject.modVersion,
            modAuthors: rootProject.modAuthors,
            modDescription: rootProject.modDescription,
    ]

    filesMatching('META-INF/neoforge.mods.toml') {
        expand replaceProperties
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}
